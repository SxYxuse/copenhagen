import{d as l,a as t,t as i,f as d,b as e,c as u}from"./disclose-version.Bedei8AD.js";import{h as p}from"./index.DWgPtC_I.js";import{B as va,H as $a,P as o}from"./blueprint.CLPDHYwR.js";import{H as h}from"./h2.BLVNhL6Q.js";import{P as g}from"./pre.DAToQk2m.js";import{H as ea}from"./h3.BZHhAxYy.js";import{A as f}from"./a.CxCmjLdc.js";var ba=i("Generating random values",1),Sa=i("Overview",1),Ma=i("Pseudo-random generators often provided by the standard math package are fast but predictable. When dealing with cryptography, having access to a strong random generator is essential.",1),xa=i("This page describes how to generate random strings and numbers from randomly generated bits.",1),wa=i("Random strings",1),Pa=i("The easiest and safest way to generate random strings is to generate random bytes and encode them with base16 (hex), base32, or base64 encoding schemes.",1),Da=i("Custom character set",1),Ca=i("If the character set length fits with an existing encoding scheme (e.g. base64), you can customize the characters used.",1),Ra=i("random number generator",1),Xa=i("If not, you would need a high-quality <!> to generate an integer within a custom range.",1),Aa=i("Random integers",1),Ta=i("If the range is a power of 2 (2, 4, 8, 16 etc), a simple bit masking will do the trick.",1),Fa=i("a modulo bias",1),Oa=i("For a custom range, a simple approach is to generate a very large random number compared to the maximum and use the modulo operator. Since this introduces <!>, the random integer must be sufficiently large. For example, if the maximum was 10 and we generated 32 random bits, the bias would be around 1/250,000,000 - which can be good enough for most use cases.",1),ka=i("introduce a bias",1),Ia=i("Another common approach is to multiply our maximum with a random float. This can also <!> but it can be fine if the maximum is small enough and, unlike our first approach, the bias is spread out.",1),Ba=i("The safest approach then is to use rejection sampling, where a random value is repeatedly generated until it's under the maximum. To increase the likelihood the random value is under the maximum, we can only generate the maximum number of bits required to represent the maximum. For example, if the maximum is 10, we would only have to generate 4 bits. In the code below, we're generating a random byte and then masking the 4 leading bits to get 4 random bits (8-4=4).",1),Na=i("Random floating-point numbers between 0 and 1",1),Ea=i("A common approach is to generate a random integer and divide it by a very big number. When doing this, it is crucial that the denominator is large enough, and that the denominator is a power of 2 to be accurately represented by float64.",1),La=i("Another approach is to generate 52 random bits for the mantissa (float64) and convert that into a float within [0, 1). This will be generally faster since it avoids division.",1),Ua=i("Biases",1),Ha=i("A very common bias seen in the wild is the modulo bias. For example, if <!> is an integer in [0, 10), some numbers will appear 3 times (0, 1) while others will appear 2 times (2, 3).",1),Ga=i("To calculate the approximate bias, we can use the formula below.",1),Va=i("For example, if we use 8 random bits and the maximum is 100, the approximate bias would be 0.6:",1),Wa=i("Multiplying the maximum with a random floating point number can introduce bias as well. In this example, <!> is within [0, 1) so the output will be [0, 5).",1),qa=i(`Let's say <!> can be one of 8 numbers: 0, 0.125, 0.25, ..., 0.875. In this case, (0, 1, 3) will appear 1/4 times while (2, 4) will only appear 1/8 times. While this is an extreme example, it is essential that the random float provides enough "randomness" compared to the maximum.`,1),ja=i('<!> <!> <!> <!> <!> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!> <figure data-rehype-pretty-code-figure=""><!></figure> <!>',1);const za={title:"Generating random values"};function te(na){var y=l(),ta=d(y);va(ta,{metadata:za,children:(ra,Ja)=>{var c=ja(),v=d(c);$a(v,{id:"generating-random-values",children:(n,s)=>{var a=ba();t(n,a)},$$slots:{default:!0}});var $=e(e(v,!0));h($,{id:"overview",children:(n,s)=>{var a=Sa();t(n,a)},$$slots:{default:!0}});var b=e(e($,!0));o(b,{children:(n,s)=>{var a=Ma();t(n,a)},$$slots:{default:!0}});var S=e(e(b,!0));o(S,{children:(n,s)=>{var a=xa();t(n,a)},$$slots:{default:!0}});var M=e(e(S,!0));h(M,{id:"random-strings",children:(n,s)=>{var a=wa();t(n,a)},$$slots:{default:!0}});var x=e(e(M,!0));o(x,{children:(n,s)=>{var a=Pa();t(n,a)},$$slots:{default:!0}});var w=e(e(x,!0)),sa=u(w);g(sa,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>import (</span></span>
<span data-line=""><span>	"crypto/rand"</span></span>
<span data-line=""><span>	"encoding/base32"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>func generateRandomString() string &#123;</span></span>
<span data-line=""><span>	bytes := make([]byte, 12)</span></span>
<span data-line=""><span>	rand.Read(bytes)</span></span>
<span data-line=""><span>	return base32.StdEncoding.EncodeToString(bytes)</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var P=e(e(w,!0));ea(P,{id:"custom-character-set",children:(n,s)=>{var a=Da();t(n,a)},$$slots:{default:!0}});var D=e(e(P,!0));o(D,{children:(n,s)=>{var a=Ca();t(n,a)},$$slots:{default:!0}});var C=e(e(D,!0)),ia=u(C);g(ia,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>import (</span></span>
<span data-line=""><span>	"crypto/rand"</span></span>
<span data-line=""><span>	"encoding/base32"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>var customEncoding = base32.NewEncoding("0123456789ABCDEFGHJKMNPQRSTVWXYZ")</span></span>
<span data-line=""> </span>
<span data-line=""><span>func generateRandomString() string &#123;</span></span>
<span data-line=""><span>	bytes := make([]byte, 12)</span></span>
<span data-line=""><span>	rand.Read(bytes)</span></span>
<span data-line=""><span>	return customEncoding.EncodeToString(bytes)</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var R=e(e(C,!0));o(R,{children:(n,s)=>{var a=Xa(),r=e(d(a,!0));f(r,{href:"#random-integers",children:(m,aa)=>{var _=Ra();t(m,_)},$$slots:{default:!0}}),t(n,a)},$$slots:{default:!0}});var X=e(e(R,!0)),da=u(X);g(da,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>const alphabet = "abcdefg"</span></span>
<span data-line=""> </span>
<span data-line=""><span>func generateRandomString() string &#123;</span></span>
<span data-line=""><span>	var result string</span></span>
<span data-line=""><span>	for i := 0; i &lt; 12; i ++ &#123;</span></span>
<span data-line=""><span>		result += string(alphabet[generateRandomInt(0, len(alphabet))])</span></span>
<span data-line=""><span>	&#125;</span></span>
<span data-line=""><span>	return result</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var A=e(e(X,!0));h(A,{id:"random-integers",children:(n,s)=>{var a=Aa();t(n,a)},$$slots:{default:!0}});var T=e(e(A,!0));o(T,{children:(n,s)=>{var a=Ta();t(n,a)},$$slots:{default:!0}});var F=e(e(T,!0)),pa=u(F);g(pa,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>bytes := make([]byte, 1)</span></span>
<span data-line=""><span>rand.Read(bytes)</span></span>
<span data-line=""><span>value := bytes[0] &amp; 0x03 // random value between [0, 3]</span></span></code>`),t(n,a)},$$slots:{default:!0}});var O=e(e(F,!0));o(O,{children:(n,s)=>{var a=Oa(),r=e(d(a,!0));f(r,{href:"#biases",children:(m,aa)=>{var _=Fa();t(m,_)},$$slots:{default:!0}}),t(n,a)},$$slots:{default:!0}});var k=e(e(O,!0)),oa=u(k);g(oa,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>import (</span></span>
<span data-line=""><span>	"crypto/rand"</span></span>
<span data-line=""><span>	"encoding/binary"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>// Generates a random integer between [0, max).</span></span>
<span data-line=""><span>// &#96;max&#96; should not be a very large number.</span></span>
<span data-line=""><span>func generateRandomUint32(max uint32): uint32 &#123;</span></span>
<span data-line=""><span>	var max uint32 = 10</span></span>
<span data-line=""><span>	bytes := make([]byte, 4)</span></span>
<span data-line=""><span>	rand.Read(bytes)</span></span>
<span data-line=""><span>	randUint32 := binary.BigEndian.Uint32(bytes) // Convert bytes to uint32</span></span>
<span data-line=""><span>	return randUint32 % max</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var I=e(e(k,!0));o(I,{children:(n,s)=>{var a=Ia(),r=e(d(a,!0));f(r,{href:"#biases",children:(m,aa)=>{var _=ka();t(m,_)},$$slots:{default:!0}}),t(n,a)},$$slots:{default:!0}});var B=e(e(I,!0)),la=u(B);g(la,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>func generateRandomUint32(max uint32): uint32 &#123;</span></span>
<span data-line=""><span>	var max uint32 = 10</span></span>
<span data-line=""><span>	return uint32(max * generateRandomFloat32())</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var N=e(e(B,!0));o(N,{children:(n,s)=>{var a=Ba();t(n,a)},$$slots:{default:!0}});var E=e(e(N,!0)),ua=u(E);g(ua,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>import (</span></span>
<span data-line=""><span>	"crypto/rand"</span></span>
<span data-line=""><span>	"math/big"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>func generateRandomUint64(max *big.Int) uint64 &#123;</span></span>
<span data-line=""><span>	randVal := new(big.Int)</span></span>
<span data-line=""><span>	shift := max.BitLen() % 8</span></span>
<span data-line=""><span>	bytes := make([]byte, (max.BitLen() / 8) + 1)</span></span>
<span data-line=""><span>	rand.Read(bytes)</span></span>
<span data-line=""><span>	if shift != 0 &#123;</span></span>
<span data-line=""><span>		bytes[0] &amp;= (1 &lt;&lt; shift) - 1</span></span>
<span data-line=""><span>	&#125;</span></span>
<span data-line=""><span>	randVal.SetBytes(bytes)</span></span>
<span data-line=""><span>	for randVal.Cmp(max) >= 0 &#123;</span></span>
<span data-line=""><span>		rand.Read(bytes)</span></span>
<span data-line=""><span>		if shift != 0 &#123;</span></span>
<span data-line=""><span>			bytes[0] &amp;= (1 &lt;&lt; shift) - 1</span></span>
<span data-line=""><span>		&#125;</span></span>
<span data-line=""><span>		randVal.SetBytes(bytes)</span></span>
<span data-line=""><span>	&#125;</span></span>
<span data-line=""><span>	return randVal.Uint64()</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var L=e(e(E,!0));ea(L,{id:"random-floating-point-numbers-between-0-and-1",children:(n,s)=>{var a=Na();t(n,a)},$$slots:{default:!0}});var U=e(e(L,!0));o(U,{children:(n,s)=>{var a=Ea();t(n,a)},$$slots:{default:!0}});var H=e(e(U,!0)),ga=u(H);g(ga,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>func generateRandomFloat64() float64 &#123;</span></span>
<span data-line=""><span>	return float64(generateRandomInteger(1&lt;&lt;53)) / (1 &lt;&lt; 53)</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var G=e(e(H,!0));o(G,{children:(n,s)=>{var a=La();t(n,a)},$$slots:{default:!0}});var V=e(e(G,!0)),ma=u(V);g(ma,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>`<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>import (</span></span>
<span data-line=""><span>	"crypto/rand"</span></span>
<span data-line=""><span>	"math"</span></span>
<span data-line=""><span>)</span></span>
<span data-line=""> </span>
<span data-line=""><span>func generateRandomFloat64() float64 &#123;</span></span>
<span data-line=""><span>	bytes := make([]byte, 7)</span></span>
<span data-line=""><span>	rand.Read(bytes)</span></span>
<span data-line=""><span>	bytes = append(make([]byte, 1), bytes...)</span></span>
<span data-line=""><span>	// set exponent part to 0b01111111111</span></span>
<span data-line=""><span>	bytes[0] = 0x3f</span></span>
<span data-line=""><span>	bytes[1] |= 0xf0</span></span>
<span data-line=""><span>	return math.Float64frombits(binary.BigEndian.Uint64(bytes)) - 1</span></span>
<span data-line=""><span>&#125;</span></span></code>`),t(n,a)},$$slots:{default:!0}});var W=e(e(V,!0));h(W,{id:"biases",children:(n,s)=>{var a=Ua();t(n,a)},$$slots:{default:!0}});var q=e(e(W,!0));o(q,{children:(n,s)=>{var a=Ha(),r=e(d(a,!0));p(r,()=>"<code>RANDOM_INT</code>"),t(n,a)},$$slots:{default:!0}});var j=e(e(q,!0)),_a=u(j);g(_a,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>'<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>RANDOM_INT % 4</span></span></code>'),t(n,a)},$$slots:{default:!0}});var z=e(e(j,!0));o(z,{children:(n,s)=>{var a=Ga();t(n,a)},$$slots:{default:!0}});var J=e(e(z,!0)),ha=u(J);g(ha,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>'<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>1 / ( RANDOM_BITS - LOG2(MAX) )</span></span></code>'),t(n,a)},$$slots:{default:!0}});var K=e(e(J,!0));o(K,{children:(n,s)=>{var a=Va();t(n,a)},$$slots:{default:!0}});var Q=e(e(K,!0)),fa=u(Q);g(fa,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>'<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>1 / ( 8 - LOG2(100) ) ≈ 1 / (8-6.4) ≈ 0.6</span></span></code>'),t(n,a)},$$slots:{default:!0}});var Y=e(e(Q,!0));o(Y,{children:(n,s)=>{var a=Wa(),r=e(d(a,!0));p(r,()=>"<code>RANDOM_FLOAT</code>"),t(n,a)},$$slots:{default:!0}});var Z=e(e(Y,!0)),ya=u(Z);g(ya,{class:"Serendipity Midnight Serendipity Morning",tabindex:"0","data-language":"untype","data-theme":"Serendipity Midnight Serendipity Morning",children:(n,s)=>{var a=l(),r=d(a);p(r,()=>'<code data-language="untype" data-theme="Serendipity Midnight Serendipity Morning" style="display: grid;"><span data-line=""><span>FLOOR( RANDOM_FLOAT * 5 )</span></span></code>'),t(n,a)},$$slots:{default:!0}});var ca=e(e(Z,!0));o(ca,{children:(n,s)=>{var a=qa(),r=e(d(a,!0));p(r,()=>"<code>RANDOM_FLOAT</code>"),t(n,a)},$$slots:{default:!0}}),t(ra,c)},$$slots:{default:!0}}),t(na,y)}export{te as default,za as metadata};
